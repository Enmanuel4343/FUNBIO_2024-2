#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define ENCODER_CLK 5
#define ENCODER_DT 6
#define ENCODER_SW 7
#define MOTOR_IN1 3
#define MOTOR_IN2 4

int menuIndex = 0;
bool adjustingValue = false;
int caudal = 0;
int tiempo = 0;
int lastStateCLK = HIGH;
bool menuNeedsUpdate = true;

const char* menuItems[] = {"Caudal", "Tiempo", "Proceso", "Nuevo proceso"};
const int numOfItems = sizeof(menuItems) / sizeof(menuItems[0]);
int visibleStartIndex = 0;
const int maxVisibleItems = 3; 

int processMenuIndex = 0;
const char* processMenuItems[] = {"Resumen", "Iniciar Proceso"};
const int processMenuItemsCount = sizeof(processMenuItems) / sizeof(processMenuItems[0]);
bool inProcessMenu = false;

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  
  pinMode(ENCODER_CLK, INPUT);
  pinMode(ENCODER_DT, INPUT);
  pinMode(ENCODER_SW, INPUT_PULLUP);

  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);

  showStaticBackground();
}

void loop() {
  handleEncoder();

  if (adjustingValue) {
    adjustValue();
  } else if (menuNeedsUpdate) {
    if (inProcessMenu) {
      handleProcessMenu();
    } else {
      navigateMenu();
    }
    menuNeedsUpdate = false;
  }
}

void showStaticBackground() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE, SSD1306_BLACK);  
  display.setCursor(0, 0);
  display.print("MENU:");
  display.drawLine(0, 16, SCREEN_WIDTH, 16, SSD1306_WHITE);
  display.display();
}

void navigateMenu() {
  display.clearDisplay();
  showStaticBackground();

  
  if (menuIndex < visibleStartIndex) {
    visibleStartIndex = menuIndex;
  } else if (menuIndex >= visibleStartIndex + maxVisibleItems) {
    visibleStartIndex = menuIndex - maxVisibleItems + 1;
  }

  for (int i = 0; i < maxVisibleItems; i++) {
    int itemIndex = visibleStartIndex + i;
    if (itemIndex < numOfItems) {
      display.setTextSize(1);
      display.setCursor(10, (i * 14) + 18); 
      display.setTextColor(itemIndex == menuIndex ? SSD1306_BLACK : SSD1306_WHITE, itemIndex == menuIndex ? SSD1306_WHITE : SSD1306_BLACK);
      display.print(menuItems[itemIndex]);
    }
  }

  display.display();
}

void handleEncoder() {
  int currentStateCLK = digitalRead(ENCODER_CLK);
  
  if (currentStateCLK != lastStateCLK) {
    menuNeedsUpdate = true; 
    if (digitalRead(ENCODER_DT) != currentStateCLK) {
      if (inProcessMenu) { 
        processMenuIndex = (processMenuIndex + 1) % processMenuItemsCount;
      } else {
        menuIndex = (menuIndex + 1) % numOfItems;
      }
    } else {
      if (inProcessMenu) {
        processMenuIndex = (processMenuIndex - 1 + processMenuItemsCount) % processMenuItemsCount;
      } else {
        menuIndex = (menuIndex - 1 + numOfItems) % numOfItems;
      }
    }
  }
  lastStateCLK = currentStateCLK;

  if (digitalRead(ENCODER_SW) == LOW) {
    delay(200);

    if (inProcessMenu) {
      if (processMenuIndex == 0) {
        showSummary();
      } else if (processMenuIndex == 1) {
        startMotor();
      }
      inProcessMenu = false;
      menuNeedsUpdate = true;
    } else if (!inProcessMenu && menuIndex < 2) {
      adjustingValue = true;
    } else if (menuIndex == 2) { 
      inProcessMenu = true;
      processMenuIndex = 0;
      menuNeedsUpdate = true;
    } else if (menuIndex == 3) {
      startReverseProcess(); 
      caudal = 0;
      tiempo = 0;
      menuNeedsUpdate = true;
    }
  }
}

void adjustValue() {
  display.clearDisplay();
  display.setTextSize(2);  
  display.setCursor(0, 0);
  
  if (menuIndex == 0) {
    display.print("Caudal:");
    display.setCursor(0, 30);
    display.print(caudal);
  } else if (menuIndex == 1) {
    display.print("Tiempo:");
    display.setCursor(0, 30);
    display.print(tiempo);
  }
  
  display.display();

  int currentStateCLK = digitalRead(ENCODER_CLK);
  if (currentStateCLK != lastStateCLK) {
    menuNeedsUpdate = true;
    if (digitalRead(ENCODER_DT) != currentStateCLK) {
      if (menuIndex == 0) {
        caudal = min(caudal + 10, 255);
      } else {
        tiempo += 1;
      }
    } else {
      if (menuIndex == 0) {
        caudal = max(caudal - 10, 0);
      } else {
        tiempo = max(tiempo - 1, 0);
      }
    }
  }

  lastStateCLK = currentStateCLK;

  if (digitalRead(ENCODER_SW) == LOW) {
    delay(200);
    adjustingValue = false;
    menuNeedsUpdate = true;
  }
}

void handleProcessMenu() {
  display.clearDisplay();
  for (int i = 0; i < processMenuItemsCount; i++) {
    display.setTextSize(1);
    display.setCursor(0, 16 + i * 12);
    display.setTextColor(i == processMenuIndex ? SSD1306_BLACK : SSD1306_WHITE, i == processMenuIndex ? SSD1306_WHITE : SSD1306_BLACK);
    display.print(processMenuItems[i]);
  }
  display.display();
}

void showSummary() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("Resumen:");
  display.setCursor(0, 12);
  display.print("Caudal: ");
  display.print(caudal);
  display.print(" (PWM)");
  display.setCursor(0, 24);
  display.print("Tiempo: ");
  display.print(tiempo);
  display.print(" s");
  display.display();
  delay(3000);
  menuNeedsUpdate = true;
}

void startMotor() {
  analogWrite(MOTOR_IN1, caudal);
  digitalWrite(MOTOR_IN2, LOW);

  delay(tiempo * 1000);

  analogWrite(MOTOR_IN1, 0);
  digitalWrite(MOTOR_IN2, LOW); 
  menuNeedsUpdate = true;
}

void startReverseProcess() {
  float reverseFactor = 5;
  analogWrite(MOTOR_IN1, LOW);  
  digitalWrite(MOTOR_IN2, reverseFactor);  
  
  delay(tiempo * 1000);  
  
  analogWrite(MOTOR_IN1, 0);
  digitalWrite(MOTOR_IN2, LOW);
  menuNeedsUpdate = true;
}
